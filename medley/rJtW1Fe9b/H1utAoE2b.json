{"_id":"H1utAoE2b","title":"Lecture05","body":{"blocks":[{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"ag6qs","text":"Lecture05","type":"header-one"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"1ppuu","text":"Casting","type":"header-one"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"febmq","text":"Static Casting","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"afb76","text":"    change the binary value inorder to change cast the number","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3p24g","text":"    ex: float num1 = 3.f;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"6vvll","text":"    int num2 = static_cast<int>(num1); // returns number 3","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"5ctu2","text":"    Animal* myPet = new Cat(2, \"lulu\");","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"e76g3","text":"    Cat* myCat = static_cast<Cat*>(myPet); //allwoed object is cat","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"ajsh9","text":"    Dog* myDog = static_cast<Dog*>(mypet); //compiles but sup dangerous","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"e4vh0","text":"    myDog->GetDogHouseName(); //crash the program","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"1krok","text":"Reinterpret Casting","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"1lvtt","text":"    doesn't change the binary representation","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3pft","text":"    never give you complier error but not right result either","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"2l29","text":"    Use for store the pointer value of an object","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"28kr7","text":"int* signedNum = new int(-10);","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"fcnkf","text":"unsigned int* unsignedNum1 = static_cast<unsigned int*>(signedNum); // compiler error","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"dooid","text":"unsigned int* unsignedNum1 = reinterpret_cast<unsigned int*>(signedNum); //compiler with different value","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"eens4","text":"Const Casting","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"6gp03","text":"    used to remove const","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"279s","text":"    cannot change anything but const","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"5vce4","text":"    usually use for their api of someppl fucked up","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"armap","text":"Animal* myPet = new Cat(2,\"lulu\");","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"40onv","text":"const Animal* petPtr = myPet; //ok","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3rvj8","text":"Animal* myAnimal = const_cast<Animal*>(perPtr); //ok","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"6b3mk","text":"Cat* myCat = const_cast<cat*>(petPtr); //complier error, only const can chang","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3koc2","text":"Dynamic_cast","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"qupf","text":"Animal* myPet = new Cat();","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"ag6jb","text":"//compiles, and returns NULL","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"288v3","text":"Dog* myDog = dynamic_cast<Dog*>(myPet);","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"23jsg","text":"//compiles, GetHouseName() will not execute","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"2qj0s","text":"if(myDog)","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"cf85h","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"eu6rv","text":"    myDog -> GetHouseName();","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"e9k3o","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"6aib8","text":"","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3t7pc","text":"Casting Rules","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"uemj","text":"1. Use static_cast by default","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"f4hll","text":"2. Use reinterpret_cast for store memory location","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"1m193","text":"3. Use const_cast only working with 3rd party libraries","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3bb89","text":"","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"c04mj","text":"Inline Function","type":"header-one"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"2rfev","text":"Its a way to reduce mutiple function calls","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"cu4pj","text":"We simply replace it with one line.","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"33ubd","text":"It have to be implement in header file","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"7o71d","text":"Good for small functions","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"59ni6","text":"the size of exe will increase","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"425h7","text":"Don't use Maro","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"f35ri","text":"    hard to debug","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"37rqq","text":"        no functin name shown on call stack","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"bgfms","text":"        cannot set breakpoints","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"amh34","text":"//Animal.h","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"r9im","text":"class Animal","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"bu4ou","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"12ke7","text":"public:","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"8tat0","text":"    Animal(int age);","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"46mh6","text":"    inline int GetAge() const;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"c67mt","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"a9kp8","text":"// memeber function with Animal::","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"9l57h","text":"int Animal::GetAge() const","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"7ng6v","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"5dh37","text":"    return mAge;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"fi212","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"5qqvo","text":"","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"ce784","text":"//math.h","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"4hk1","text":"//non-member function without class name","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"4qucp","text":"inline int Square(int number)","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"kgr0","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"9nvi9","text":"    return number*number;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"ces1e","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"7msb1","text":"Static","type":"header-one"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"acgqn","text":"Global variables with limite scopes","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"e615k","text":"    file","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"c6oup","text":"    namespace","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"fri9k","text":"    class","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3i3as","text":"    function","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"4jrf4","text":"    etc...","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"4l2aj","text":"Only one copy in memory","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"a4j19","text":"All static keywords in header file","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"6oihc","text":"extern","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"61jm7","text":"allows to access other file's global variables","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"83ddl","text":"//ExternTest.h","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"4o9m2","text":"extern int globalValue;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"5mmnh","text":"void IncreaseValue();","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"38lpi","text":"//ExternTest.c","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"a0ic6","text":"#include \"ExternTest.h\"","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"7bla3","text":"int globalValue = 2;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"8p9v1","text":"void IncreaseValue()","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"80vl2","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"9ksoi","text":"    globalValue++;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"c3ih7","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"74dn7","text":"//Main.c","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"2vm62","text":"#include \"ExternTest.h\"","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"4pr7h","text":"int main()","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"7v74v","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"dbne4","text":"    printf(\"%d\", globalValue);","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3lv03","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"21qor","text":"Static Variable in Functions","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"epjf4","text":"only access within the function","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"2gqgg","text":"void Accumulate(int number)","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"al3nj","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"88p3g","text":"    static int result = 0;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"2cn2o","text":"    result += number;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"7jild","text":"    std::out << \"result=\" << result << std::out;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"2as12","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"9vplc","text":"int main()","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"afke6","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"f2i7r","text":"    Accumulate(10);  //10","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"fevb2","text":"    Accumulater(20); //30","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"9c7b7","text":"    return 0;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"dfd8d","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"90gtq","text":"Static Member Variables","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"f3b9o","text":"ONE PER CLASS","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"ak9dh","text":"no part of object memory layout","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"9qbms","text":"part of class memory","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"2ttg0","text":"reserved in exe file","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"cp8qi","text":"//cat.h","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"8u66j","text":"class cat","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"5upqu","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"a8meb","text":"public: ","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"1o23d","text":"    Cat();","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"a5tje","text":"private:","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"4ong8","text":"    static int mCount;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"dvtoa","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"6khcs","text":"//Cat.cpp","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"bull3","text":"int Cat::mCount = 0;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3o3oj","text":"Cat::Cat()","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"30rvt","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"1fudr","text":"    mCount++;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"5cpui","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"59kd9","text":"Best Practices","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"43jgu","text":"Don't put static in function","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"845cl","text":"    put in class","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"dn043","text":"Perfer static over global","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"5all4","text":"Static Member function","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"1d0sm","text":"Global functions","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"7da82","text":"ca access only static member","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"etqbd","text":"can call static function without an object","type":"unstyled"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"cp8ne","text":"//Math.h","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"d7dqq","text":"class Math","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"32rca","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"bab68","text":"public:","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"3l3sf","text":"    static int Square(int number);","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"23tuo","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"d2c11","text":"//Math.cpp","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"a4gp2","text":"int Math::Square(int number)","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"5adna","text":"{","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"8nb67","text":"    return number * number;","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"6n030","text":"}","type":"custom-code-block-cpp"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"e7o2k","text":"Summary","type":"header-two"},{"data":{},"depth":0,"entityRanges":[],"inlineStyleRanges":[],"key":"6u5f5","text":"Because all the functions and parameter stores in memory and we have to keep finding them\nInline is not guarantee and macro is guarantee\nMarco never fail but inline will\n\n3typese -> \t1.static var for the file, 2. in a function 3. static var inside of class\n\tlimited the access from outside file\n\tdon’t use it\nOne copy\n","type":"unstyled"}],"entityMap":{}},"dateCreated":"2017-10-06T07:19:28.484Z","lastUpdated":"2017-10-30T22:13:07.696Z","notebookId":"rJtW1Fe9b"}
